package greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOCK_SAVE".
*/
public class StockSaveDao extends AbstractDao<StockSave, Long> {

    public static final String TABLENAME = "STOCK_SAVE";

    /**
     * Properties of entity StockSave.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Stockname = new Property(1, String.class, "stockname", false, "stockname");
        public final static Property Trade = new Property(2, String.class, "trade", false, "trade");
        public final static Property Time = new Property(3, String.class, "time", false, "time");
        public final static Property Ricechangde = new Property(4, String.class, "ricechangde", false, "ricechangd");
        public final static Property Changepercent = new Property(5, String.class, "changepercent", false, "changepercent");
        public final static Property Sysmbol = new Property(6, String.class, "Sysmbol", false, "symbol");
    }


    public StockSaveDao(DaoConfig config) {
        super(config);
    }
    
    public StockSaveDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOCK_SAVE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"stockname\" TEXT," + // 1: stockname
                "\"trade\" TEXT," + // 2: trade
                "\"time\" TEXT," + // 3: time
                "\"ricechangd\" TEXT," + // 4: ricechangde
                "\"changepercent\" TEXT," + // 5: changepercent
                "\"symbol\" TEXT);"); // 6: Sysmbol
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOCK_SAVE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StockSave entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stockname = entity.getStockname();
        if (stockname != null) {
            stmt.bindString(2, stockname);
        }
 
        String trade = entity.getTrade();
        if (trade != null) {
            stmt.bindString(3, trade);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String ricechangde = entity.getRicechangde();
        if (ricechangde != null) {
            stmt.bindString(5, ricechangde);
        }
 
        String changepercent = entity.getChangepercent();
        if (changepercent != null) {
            stmt.bindString(6, changepercent);
        }
 
        String Sysmbol = entity.getSysmbol();
        if (Sysmbol != null) {
            stmt.bindString(7, Sysmbol);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StockSave entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String stockname = entity.getStockname();
        if (stockname != null) {
            stmt.bindString(2, stockname);
        }
 
        String trade = entity.getTrade();
        if (trade != null) {
            stmt.bindString(3, trade);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(4, time);
        }
 
        String ricechangde = entity.getRicechangde();
        if (ricechangde != null) {
            stmt.bindString(5, ricechangde);
        }
 
        String changepercent = entity.getChangepercent();
        if (changepercent != null) {
            stmt.bindString(6, changepercent);
        }
 
        String Sysmbol = entity.getSysmbol();
        if (Sysmbol != null) {
            stmt.bindString(7, Sysmbol);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StockSave readEntity(Cursor cursor, int offset) {
        StockSave entity = new StockSave( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stockname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // trade
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ricechangde
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // changepercent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // Sysmbol
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StockSave entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStockname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrade(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRicechangde(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setChangepercent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSysmbol(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StockSave entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StockSave entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StockSave entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
